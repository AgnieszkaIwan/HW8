{"version":3,"file":"static/js/46.6a284911.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-07-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-07-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactForm_container__qpJ1N\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport { NotificationManager } from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\nimport styles from './ContactForm.module.css';\nimport classNames from 'classnames';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(state => state.contacts.contacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (checkIfContactExists(name)) {\n      NotificationManager.error('Contact already exists!', 'Error');\n      return;\n    }\n\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    try {\n      await dispatch(addContact(contact));\n      setName('');\n      setNumber('');\n    } catch (error) {}\n  };\n\n  const checkIfContactExists = name => {\n    return contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  return (\n    <form className={styles.container} onSubmit={handleSubmit}>\n      <input\n        className={classNames(styles.input)}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[A-Za-z.'\\- ]+$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <input\n        className={classNames(styles.input)}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"^\\+?\\d{1,4}?\\s?\\(?\\d{1,4}?\\)?\\s?\\d{1,4}\\s?\\d{1,4}\\s?\\d{1,9}$\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={e => setNumber(e.target.value)}\n      />\n      <button className={classNames(styles.button)} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"listItem\":\"ContactList_listItem__SptUx\",\"deleteButton\":\"ContactList_deleteButton__3hT3n\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = async id => {\n    try {\n      await dispatch(deleteContact(id));\n    } catch (error) {}\n  };\n\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          <span>{contact.name} </span>\n          <span>{contact.number}</span>\n          <button\n            className={styles.deleteButton}\n            onClick={() => handleDeleteContact(contact.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/operations';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"filter\">Filter contacts by name:</label>\n      <input\n        type=\"text\"\n        id=\"filter\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n        placeholder=\"Enter name\"\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport {\n  addContact,\n  deleteContact,\n  setFilter,\n} from '../redux/contacts/operations';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport { Helmet } from 'react-helmet';\n\nexport default function Contacts() {\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // Fetch contacts from the backend API when the application starts or reloads\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleAddContact = contact => {\n    dispatch(addContact(contact));\n  };\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm addContact={handleAddContact} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} onFilterChange={handleFilterChange} />\n      <ContactList\n        contacts={filteredContacts}\n        deleteContact={handleDeleteContact}\n      />\n    </>\n  );\n}\n"],"names":["useState","name","setName","number","setNumber","contacts","useSelector","state","dispatch","useDispatch","handleSubmit","e","preventDefault","checkIfContactExists","NotificationManager","contact","id","nanoid","addContact","some","toLowerCase","className","styles","onSubmit","classNames","type","pattern","title","required","value","onChange","target","handleDeleteContact","deleteContact","map","onClick","filter","htmlFor","event","setFilter","placeholder","Contacts","useEffect","fetchContacts","filteredContacts","includes","Helmet","onFilterChange"],"sourceRoot":""}